// Code generated by MockGen. DO NOT EDIT.
// Source: repository/device_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/BerryTracer/device-service/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// CreateDevice mocks base method.
func (m *MockDeviceRepository) CreateDevice(ctx context.Context, device *model.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockDeviceRepositoryMockRecorder) CreateDevice(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDeviceRepository)(nil).CreateDevice), ctx, device)
}

// GetDeviceById mocks base method.
func (m *MockDeviceRepository) GetDeviceById(ctx context.Context, id string) (*model.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceById", ctx, id)
	ret0, _ := ret[0].(*model.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceById indicates an expected call of GetDeviceById.
func (mr *MockDeviceRepositoryMockRecorder) GetDeviceById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceById", reflect.TypeOf((*MockDeviceRepository)(nil).GetDeviceById), ctx, id)
}

// GetDeviceBySerialNumber mocks base method.
func (m *MockDeviceRepository) GetDeviceBySerialNumber(ctx context.Context, serialNumber string) (*model.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceBySerialNumber", ctx, serialNumber)
	ret0, _ := ret[0].(*model.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceBySerialNumber indicates an expected call of GetDeviceBySerialNumber.
func (mr *MockDeviceRepositoryMockRecorder) GetDeviceBySerialNumber(ctx, serialNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceBySerialNumber", reflect.TypeOf((*MockDeviceRepository)(nil).GetDeviceBySerialNumber), ctx, serialNumber)
}

// GetDevicesByUserId mocks base method.
func (m *MockDeviceRepository) GetDevicesByUserId(ctx context.Context, userId string) ([]*model.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesByUserId", ctx, userId)
	ret0, _ := ret[0].([]*model.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicesByUserId indicates an expected call of GetDevicesByUserId.
func (mr *MockDeviceRepositoryMockRecorder) GetDevicesByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesByUserId", reflect.TypeOf((*MockDeviceRepository)(nil).GetDevicesByUserId), ctx, userId)
}
